//1. 实例化axios对象，并设置请求地址和超时时间
// const axios = require('axios'); //创建axios对象
// import qs from 'qs'

// axios.defaults.baseURL = 'http://peixun.92shequ.com'; //vue请求后段地址
axios.defaults.baseURL = baseURL; //vue请求后段地址
axios.defaults.timeout = 10000;                        //多久超时
axios.defaults.withCredentials = true;                 // 跨域访问需要发送cookie时，一定要拿axios defaults.withCredentials = true ;

/**
 * 设置请求传递数据的格式（看服务器要求的格式）
 * x-www-form-urlencoded
 * 默认提交表单数据
 * 把数据对象序列化成 表单数据
 */
// axios.defaults.headers['Content-Ttype'] = 'application/x-www-form-urlencoded';
// axios.defaults.transformRequest = data => qs.stringify(data);

/**
 * 设置默认提交
 * 把数据对象序列化成 json 字符串
 */
axios.defaults.headers['Content-Type'] = 'application/json';  //设置默认提交 json
// axios.defaults.transformRequest = data => JSON.stringify(data);   //把数据对象序列化成 json字符串

// 第二步： 对请求拦截器，和响应拦截器进行封装
/**
 *请求拦截器：发送请求前需要调用这个函数
 1.当没有登录时，直接跳转到登录页
 2.请求发送前把token获取，设置到header中
 */
axios.interceptors.request.use(config => {
// 从localStorage中获取token
    // let token = localStorage.getItem('token');
    // 如果token，就把token设置到请求头中Authorization字段中
    // token && (config.headers.Aithorization = token);
    return config;
},error => {
    return Promise.reject(error)
})
/**
 * 响应拦截器： 当后端返回数据给vue时会调用这个函数
 1.每次返回错误403时，跳转到login
 */
axios.interceptors.response.use(response => {
    // 当响应码是 2xx 的情况，进入这里
    // console.log('response', response)
    // 授权登录
    if(response.data.code == 100007){
        const redirectURL = window.location.href.replace(baseURL, '')
        layer.msg(response.data.message, { timeout:1000 },function(){
            // window.location.href = '/api/wx/oauth?jumpUrl=' + redirectURL;
            getData('/api/test-login')
        })
    }
    // 绑定手机号
    if(response.data.code == 2000016){
        const redirectURL = encodeURIComponent(window.location.href)
        layer.msg(response.data.message, { timeout:1000 },function(){
            window.location.href = '/web/reg?redirectURL=' + redirectURL;
            // getData('/api/test-login')
        })
    }
    return response.data;
},error => {
    //当响应码不是 2xx 的情况，进入这里
    return error
});
// 第三步：使用上面的axios对象，对get请求和post请求进行封装
/**
 * get方法，对应get请求
 * @param {String} url [请求的url地址]
 */
function getData(url,params){
    return new Promise((resolve, reject) => {
        axios.get(url, {params})
            .then(function(res) {
                if (res.code === 0) {
                    // layer.msg(res.message);
                    resolve(res.data);
                } else {
                    layer.msg(res.message);
                    // resolve(res);
                }
            })
            .catch(function(error) {
                reject(error);
            });
    });
}

/* POST请求
*/
function postData(url,params){
    return new Promise((resolve, reject) => {
        axios.post(url, params)
            .then(function(res) {
                if (res.code === 0) {
                    resolve(res.data);
                } else {
                    layer.msg(res.message);
                    // resolve(res);
                }
            })
            .catch(function(error) {
                reject(error);
            });
    });
}

// put
function putData(url,params){
    return new Promise((resolve, reject) => {
        axios.put(url, params)
            .then(function(res) {
                if (res.code === 0) {
                    resolve(res.data);
                } else {
                    layer.msg(res.message);
                    // resolve(res);
                }
            })
            .catch(function(error) {
                reject(error);
            });
    });
}
// export default axios; //一定要
